"""
Example client to demonstrate how to use the RAG Chatbot API
"""

import requests
import json
from typing import Optional

class RagChatbotClient:
    """Client for interacting with the RAG Chatbot API"""
    
    def __init__(self, base_url: str = "http://localhost:8000", api_key: Optional[str] = None):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        if api_key:
            self.session.headers.update({"Authorization": f"Bearer {api_key}"})
    
    def health_check(self) -> dict:
        """Check if the API is healthy"""
        response = self.session.get(f"{self.base_url}/health")
        response.raise_for_status()
        return response.json()
    
    def create_session(self) -> str:
        """Create a new chat session"""
        response = self.session.post(f"{self.base_url}/sessions")
        response.raise_for_status()
        return response.json()["session_id"]
    
    def chat(self, message: str, session_id: Optional[str] = None, mode: str = "original") -> dict:
        """Send a chat message"""
        payload = {
            "message": message,
            "mode": mode
        }
        if session_id:
            payload["session_id"] = session_id
        
        response = self.session.post(f"{self.base_url}/chat", json=payload)
        response.raise_for_status()
        return response.json()
    
    def get_conversation_history(self, session_id: str) -> dict:
        """Get conversation history for a session"""
        response = self.session.get(f"{self.base_url}/sessions/{session_id}/history")
        response.raise_for_status()
        return response.json()
    
    def delete_session(self, session_id: str) -> dict:
        """Delete a session"""
        response = self.session.delete(f"{self.base_url}/sessions/{session_id}")
        response.raise_for_status()
        return response.json()
    
    def get_session_stats(self) -> dict:
        """Get session statistics"""
        response = self.session.get(f"{self.base_url}/sessions/stats")
        response.raise_for_status()
        return response.json()

def main():
    """Example usage of the RAG Chatbot API"""
    
    # Initialize client
    client = RagChatbotClient(
        base_url="http://localhost:8000",
        api_key="your-secret-api-key"  # Set to None if no API key required
    )
    
    try:
        # Check health
        health = client.health_check()
        print(f"‚úÖ API Health: {health['status']}")
        
        # Create a new session
        session_id = client.create_session()
        print(f"üìù Created session: {session_id}")
        
        # Example conversation
        questions = ['–ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞ –∑–∞—è–≤–ª—è–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?',
 '–ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ 4 –≥–æ–¥–∞ –¥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é?',
 '–û–±—è–∑–∞–Ω –ª–∏ –ø–µ–¥–∞–≥–æ–≥ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –û–ó–ü, –µ—Å–ª–∏ —É –Ω–µ–≥–æ —Å—Ç–∞–∂ –±–æ–ª–µ–µ 30 –ª–µ—Ç?',
 '–ï—Å–ª–∏ –≤ –¥–∏–ø–ª–æ–º–µ –ø–µ–¥–∞–≥–æ–≥–∞ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ –∫–∞–∫–æ–º—É –∏–∑ –Ω–∏—Ö –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é?',
 '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ–¥–∞–≥–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ—à–∫–æ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é  —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?',
 '–ö–∞–∫–æ–π –ø–æ—Ä–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –û–ó–ü?',
 '–°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ –ø–µ–¥–∞–≥–æ–≥—É-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞?']
        
        print("\nü§ñ Starting conversation...")
        print("=" * 50)
        
        for i, question in enumerate(questions, 1):
            print(f"\nüë§ User: {question}")
            
            # Send message
            response = client.chat(message=question, session_id=session_id)
            
            print(f"ü§ñ Bot: {response['response']}")
            print(f"üìä Message #{response['message_count']} | Session: {response['session_id'][:8]}...")
            
            if response.get('metadata'):
                print(f"üìà Metadata: {json.dumps(response['metadata'], indent=2)}")
        
        # Get conversation history
        print(f"\nüìú Getting conversation history...")
        history = client.get_conversation_history(session_id)
        print(f"Total messages: {history['message_count']}")
        
        # Get session stats
        stats = client.get_session_stats()
        print(f"\nüìä Active sessions: {stats['active_sessions']}")
        
        # Clean up
        client.delete_session(session_id)
        print(f"üóëÔ∏è Deleted session: {session_id}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API Error: {e}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()